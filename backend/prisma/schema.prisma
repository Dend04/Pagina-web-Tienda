generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             BigInt         @id @default(autoincrement())
  nombre         String
  fotoPerfil     String?
  username       String         @unique
  password       String
  email          String         @unique
  direccion      String
  rol            String
  telefono       String?        @db.VarChar(15)
  pedidos        Pedido[]
  notificaciones Notificacion[]
  favoritos      Favorito[]
  Producto       Producto?      @relation(fields: [productoId], references: [id])
  productoId     BigInt?
  Carrito        Carrito?
}

model Producto {
  id                     BigInt         @id @default(autoincrement())
  nombre                 String
  descripcion            String?
  precio                 Decimal        @db.Decimal(10, 2)
  costo                  Decimal        @db.Decimal(10, 2)
  foto_url               String?
  uso                    String?
  veces_comprado         BigInt?
  veces_comprado_usuario Int?
  pedidos                Pedido[]
  notificaciones         Notificacion[]
  favoritos              Favorito[]
  usuario                Usuario[]
  Carrito                Carrito?       @relation(fields: [carritoId], references: [id])
  carritoId              BigInt?
  CarritoItem            CarritoItem[]
}

model Pedido {
  id              BigInt   @id @default(autoincrement())
  usuario_id      BigInt
  usuario         Usuario  @relation(fields: [usuario_id], references: [id])
  fecha_pedido    DateTime @default(now()) @db.Timestamptz(6)
  estado          String
  producto_id     BigInt
  producto        Producto @relation(fields: [producto_id], references: [id])
  cantidad        Int
  precio_unitario Decimal  @db.Decimal(10, 2)
}

model Notificacion {
  id          BigInt           @id @default(autoincrement())
  tipo        NotificacionTipo
  usuario_id  BigInt
  usuario     Usuario          @relation(fields: [usuario_id], references: [id])
  producto_id BigInt
  producto    Producto         @relation(fields: [producto_id], references: [id])
  mensaje     String?
  fecha_envio DateTime         @default(now()) @db.Timestamptz(6)
}

model Favorito {
  id          BigInt   @id @default(autoincrement())
  usuario_id  BigInt
  producto_id BigInt
  usuario     Usuario  @relation(fields: [usuario_id], references: [id])
  producto    Producto @relation(fields: [producto_id], references: [id])
  creado_en   DateTime @default(now()) @db.Timestamptz(6)

  @@unique([usuario_id, producto_id])
}

model Carrito {
  id            BigInt        @id @default(autoincrement())
  usuario       Usuario       @relation(fields: [usuarioId], references: [id])
  usuarioId     BigInt        @unique
  items         CarritoItem[] // Tabla intermedia
  creadoEn      DateTime      @default(now()) @db.Timestamptz(6)
  actualizadoEn DateTime      @default(now()) @db.Timestamptz(6)
  Producto      Producto[]
}

model CarritoItem {
  id             BigInt   @id @default(autoincrement())
  carrito        Carrito  @relation(fields: [carritoId], references: [id])
  carritoId      BigInt
  producto       Producto @relation(fields: [productoId], references: [id])
  productoId     BigInt
  cantidad       Int      @default(1)
  precioUnitario Decimal  @db.Decimal(10, 2) // Precio al momento de agregar
  creadoEn       DateTime @default(now()) @db.Timestamptz(6)

  @@unique([carritoId, productoId]) // Evita duplicados
}

enum NotificacionTipo {
  STOCK_BAJO
  FAVORITO_DISPONIBLE
  PROMOCION
}
